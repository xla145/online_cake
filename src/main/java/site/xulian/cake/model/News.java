package site.xulian.cake.model;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.jfinal.kit.JsonKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.sun.org.apache.bcel.internal.generic.NEW;
import org.apache.log4j.Logger;
import org.omg.PortableInterceptor.INACTIVE;
import site.xulian.cake.model.base.BaseNews;
import site.xulian.cake.utils.Common;
import site.xulian.cake.utils.Constant;

import java.util.*;


/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class News extends BaseNews<News> {
	public static final News dao = new News().dao();
	public final static Logger log = Logger.getLogger(News.class);
	/**
	 * 创建新闻信息
	 * */
	public void saveNews(String json,Integer type){
		if(json == null) {
			log.info("新闻信息返回为空！");
			return;
		}
		JSONObject newsObject = JSONObject.parseObject(json);
		JSONArray jsonArray = newsObject.getJSONArray("data");
		if(jsonArray.size() == 0){
			log.info("新闻信息返回为空！");
		}
		log.info(JsonKit.toJson(jsonArray));
		List<Object> parms = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer();
		sql.append("INSERT INTO news(title,type,author_name,url,thumbnail_pic_s,uniquekey,category,news_date,create_time,update_time) VALUES ");
		for (int i = 0; i < jsonArray.size(); i++) {
            Set<String> uniquekeySet = getNewsListByType(type);
			JSONObject jsonObject = jsonArray.getJSONObject(i);
			log.info("新闻信息"+ JsonKit.toJson(jsonObject));
			if (!uniquekeySet.isEmpty()) {
			    log.info(!uniquekeySet.isEmpty());
				if(uniquekeySet.contains(jsonObject.get("uniquekey").toString())){
				    continue;
                }
			}
			log.info("新闻信息"+ JsonKit.toJson(jsonObject));
			sql.append("(?,?,?,?,?,?,?,?,NOW(),NOW()),");
			parms.add(jsonObject.get("title"));
			parms.add(type);
			parms.add(jsonObject.get("author_name"));
			parms.add(jsonObject.get("url"));
			parms.add(jsonObject.get("thumbnail_pic_s"));
			parms.add(jsonObject.get("uniquekey"));
			parms.add(jsonObject.get("category"));
			parms.add(jsonObject.get("date"));
		}
		try {
			int num = Db.update(sql.deleteCharAt(sql.length()-1).toString(),parms.toArray());
		}catch (Exception e){
			e.printStackTrace();
			log.error("添加新闻新闻错误！"+e.getMessage());
		}
	}

	/**
	 * 根据类型获取新闻
	 * @param  type
	 * */
	public Set<String> getNewsListByType(Integer type) {
		List<News> newsList = News.dao.find("SELECT * FROM news where type = ?",type);
		Set<String> set = new HashSet<String>();
        for(News n:newsList){
            set.add(n.getUniquekey());
        }
        return set;
	}

	/**
	 * 根据类型获取最新的10条新闻
	 * */
	public List<Map<String,Object>> getNewsList(Integer pageSize ,Integer pageNum) {
	    List<Map<String,Object>> newsList = new ArrayList<Map<String,Object>>();
	    List<NewsType> newsTypeList = NewsType.dao.getNewsTypes();
	    for (NewsType newsType : newsTypeList) {
	        log.info("id"+newsType.getId());
            Map<String,Object> map = new HashMap<String, Object>();
	        map.put("type",newsType.getId());
            //Page<News> newsPage = News.dao.paginate(pageNum,pageSize,"SELECT *","FROM news WHERE type = ? ORDER BY update_time",newsType.getId());
            log.info("data"+JsonKit.toJson(getNewsList(pageSize,pageNum,newsType.getId())));
            map.put("data",getNewsList(pageSize,pageNum,newsType.getId()));
            //log.info("list"+newsPage.getList());
            newsList.add(map);
        }
        log.info(JsonKit.toJson(newsList));
		//Page<News> newsPage = News.dao.paginateByCache(Constant.CACHE_KEY_25, Common.generEhcacheKey("["+pageSize+"]"+"["+pageNum+"]"+"["+type+"]"),pageNum,pageSize,"SELECT *","FROM news WHERE type  = ?",type);
		//Page<News> newsPage = News.dao.paginate(pageNum,pageSize,"SELECT *","FROM news ");
		return newsList;
	}
	/**
     * 根据类型获取最新的10条新闻
     * */
	public List<News> getNewsList(Integer pageSize ,Integer pageNum,Integer type){
        Page<News> newsPage = News.dao.paginateByCache(Constant.CACHE_KEY_30, Common.generEhcacheKey("["+pageSize+"]"+"["+pageNum+"]"+"["+type+"]"),pageNum,pageSize,"SELECT *","FROM news WHERE type = ? ORDER BY update_time DESC ",type);
        return newsPage.getList();
	}
	/**
     * 定期删除数据
     * */
	public void delNews(Date time) {
	    Db.update("DELETE FROM news where create_time < ?",time);
    }

}
